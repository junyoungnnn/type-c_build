export declare class Motion {
    private static NEXT_ID;
    readonly id: number;
    private _playCount;
    get playCount(): number;
    state: AnyState;
    private animation;
    private duration;
    private progress;
    private startTime;
    private currentFrame;
    private easing;
    private then;
    private chainAfter;
    private _reset;
    private _stopped;
    get stopped(): boolean;
    private _paused;
    get isPaused(): boolean;
    reverse: boolean;
    loop: LoopType;
    constructor(props: MotionProps);
    static preform(p: MotionProps): Motion;
    play(): void;
    tick(time: number): void;
    pause(): void;
    stop(): void;
    rewind(): void;
    reset(): void;
    setChain(func: () => void): void;
}
export declare class MotionChain {
    private animationInstances;
    private runningInstances;
    private runningIndex;
    constructor(instances: MotionProps[]);
    play(reverse?: boolean): void;
    togglePause(): void;
    private run;
}
declare enum LoopType {
    NONE = 0,
    LOOP = 1,
    ALTERNATE = 2
}
interface AnyState {
    [key: string]: any;
}
interface MotionProps {
    animation: (x: number) => void;
    easing?: EasingFunction;
    duration?: number;
    reverse?: boolean;
    loop?: LoopType;
    then?: () => void;
    state?: AnyState;
    reset?: () => void;
}
declare type EasingFunction = (x: number) => number;
export {};
